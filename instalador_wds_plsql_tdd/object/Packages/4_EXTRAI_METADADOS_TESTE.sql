--
-- Responsável por extrair todos os metadados existentes em uma Function de Teste
CREATE OR REPLACE PACKAGE EXTRAI_METADADOS_TESTE AS
--
-- Responsável por extrair todos os metadados existentes em uma Function de Teste
--
-- Autor: Wesley David Santos
-- Skype: wesleydavidsantos		
-- https://www.linkedin.com/in/wesleydavidsantos
--

	TYPE ITEM_TESTE IS RECORD (
         NOME VARCHAR2(2000)
        ,INFO VARCHAR2(4000)
        ,ALVO_OWNER VARCHAR2(50)
        ,ALVO_OBJECT VARCHAR2(200)
		,TESTE_AUXILIAR BOOLEAN
		,TESTE_DESATIVADO BOOLEAN
        ,QUERY_ARGUMENTO VARCHAR2(4000)
		,HASH_ARGUMENTO VARCHAR2(32)
        ,ANTES SYS.ODCIVARCHAR2LIST
        ,DEPOIS SYS.ODCIVARCHAR2LIST
    );


	--
	-- Inicia a leitura dos Metadados
	FUNCTION LER_METADADOS( p_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN;
	
	
	FUNCTION GET_TESTE RETURN ITEM_TESTE;
	
	
	FUNCTION RESULTADO RETURN VARCHAR2;
		
	
END EXTRAI_METADADOS_TESTE;
/





CREATE OR REPLACE PACKAGE BODY EXTRAI_METADADOS_TESTE AS
--
-- Autor: Wesley David Santos
-- Skype: wesleydavidsantos		
-- https://www.linkedin.com/in/wesleydavidsantos
--

	v_PARAMETROS_JSON CLOB;
	
	v_NOME_FUNCTION_TESTE VARCHAR2(200);
	
	v_CODIGO_FONTE_FUNCTION CLOB;
	
    TESTE ITEM_TESTE;
		
	RAISE_ERRO_ENCONTRADO EXCEPTION;
	
	
	FUNCTION RESULTADO RETURN VARCHAR2 AS
	BEGIN
		
		RETURN LOG_GERENCIADOR.GET_MSG;
	
	END;
	
	
	FUNCTION GET_TESTE RETURN ITEM_TESTE AS
	BEGIN
		
		RETURN TESTE;
	
	END;
	

	PROCEDURE EXTRAI_CODIGO_FONTE_FUNCTION AS

		v_CODIGO_FONTE CLOB;

	BEGIN


		FOR ITEM IN (
		
			SELECT
				TEXT
			FROM
				ALL_SOURCE
			WHERE
				OWNER = CONSTANTES.OWNER_WDS_TDD_TESTE
				AND TYPE = 'FUNCTION' 
				AND NAME = v_NOME_FUNCTION_TESTE
			ORDER BY LINE
		)
		LOOP
		
			v_CODIGO_FONTE := v_CODIGO_FONTE || ITEM.TEXT;
			
		END LOOP;


		v_CODIGO_FONTE_FUNCTION := v_CODIGO_FONTE;

	END;	
	
	
	PROCEDURE COLETA_PARAMETROS_JSON AS
		
		v_INICIO_JSON PLS_INTEGER;
		
		v_FIM_JSON PLS_INTEGER;

		v_JSON CLOB;
	
	BEGIN
		
		-- Localiza o início do comentário do tipo /* */
		v_INICIO_JSON := INSTR(v_CODIGO_FONTE_FUNCTION, '/*', 1, 1);
		
		
		WHILE v_INICIO_JSON > 0 LOOP	
		
			-- Localiza o fim do comentário do tipo /* */
			v_FIM_JSON := INSTR(v_CODIGO_FONTE_FUNCTION, '*/', v_INICIO_JSON);
			
			
			IF v_FIM_JSON = 0 THEN
				EXIT; 
			END IF;


			-- Captura o conteúdo do comentário
			v_JSON := SUBSTR(v_CODIGO_FONTE_FUNCTION, v_INICIO_JSON, v_FIM_JSON - v_INICIO_JSON + 2);


			-- Verifica se as chaves de JSON está dentro do comentário
			IF INSTR(v_JSON, '{') > 0 AND INSTR(v_JSON, '}') > 0 THEN
				EXIT;
			END IF;
			
			
			-- Reset da variável, JSON não identificado nesse intervalo de comentário
			v_JSON := NULL;
			

			-- Encontra o próximo comentário
			v_INICIO_JSON := INSTR(v_CODIGO_FONTE_FUNCTION, '/*', v_FIM_JSON + 1);
			
			
		END LOOP;


		v_PARAMETROS_JSON := v_JSON;


	END;


	FUNCTION JSON_EXISTE RETURN BOOLEAN IS
	BEGIN
		
		
		BEGIN
			
			COLETA_PARAMETROS_JSON;
			
			RETURN v_PARAMETROS_JSON IS NOT NULL;
		
		EXCEPTION
			
			WHEN OTHERS THEN
			
				RETURN FALSE;
		
		END;
		
	
	END;
	
	
	FUNCTION GET_PARAMETRO_EXISTE( p_PARAMETRO VARCHAR2, p_PATTERN VARCHAR2 ) RETURN BOOLEAN IS
	BEGIN
		
		BEGIN


			-- Verifica se o parâmetro foi declarado
			RETURN REGEXP_LIKE(v_PARAMETROS_JSON, p_PATTERN);

		
		EXCEPTION
			

			WHEN NO_DATA_FOUND THEN
				
				NULL;
				
			WHEN OTHERS THEN
				
				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Erro ao verificar se o parâmetro existe no Json do Teste: ' || p_PARAMETRO || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;
				
		END;
		
	
	END;

	
	FUNCTION GET_EXTRAIR_PARAMETRO( p_PARAMETRO VARCHAR2, p_PATTERN VARCHAR2 ) RETURN VARCHAR2 IS
		
		v_VALOR_JSON VARCHAR2(4000) DEFAULT NULL;
	
	BEGIN
		
		BEGIN
		
			-- Retorna o nome do Teste
			SELECT TRIM( REGEXP_SUBSTR( v_PARAMETROS_JSON, p_PATTERN, 1, 1, NULL, 1) ) INTO v_VALOR_JSON FROM DUAL;
		
		EXCEPTION
			
			WHEN NO_DATA_FOUND THEN
				
				NULL;
				
			WHEN OTHERS THEN
				
				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Erro na coleta do parâmetro: ' || p_PARAMETRO || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;
				
		END;
		
		
		RETURN v_VALOR_JSON;
	
	END;
	
	
	FUNCTION GET_EXTRAIR_PARAMETRO_LISTA( p_PARAMETRO VARCHAR2, p_PATTERN VARCHAR2 ) RETURN SYS.ODCIVARCHAR2LIST IS
	
		v_VALOR_JSON VARCHAR2(4000) DEFAULT NULL;
		
		v_VALOR_JSON_LISTA SYS.ODCIVARCHAR2LIST;
	
	BEGIN
		
		
		BEGIN
		
			v_VALOR_JSON := GET_EXTRAIR_PARAMETRO( p_PARAMETRO, p_PATTERN );
			
			SELECT 
				REGEXP_SUBSTR( v_VALOR_JSON, '[^,]+', 1, LEVEL) BULK COLLECT INTO v_VALOR_JSON_LISTA
			FROM DUAL
				CONNECT BY REGEXP_SUBSTR( v_VALOR_JSON, '[^,]+', 1, LEVEL) IS NOT NULL;


			
			-- Formata os valores para remover espaços em branco
			FOR POSICAO IN 1..v_VALOR_JSON_LISTA.COUNT LOOP
        
				v_VALOR_JSON_LISTA( POSICAO ) := TRIM( v_VALOR_JSON_LISTA( POSICAO ) );
			
			END LOOP;

				
			RETURN v_VALOR_JSON_LISTA;
			
			
		EXCEPTION
			
			WHEN NO_DATA_FOUND THEN
				
				NULL;
				
			WHEN OTHERS THEN
				
				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Erro na coleta do parâmetro tipo lista: ' || p_PARAMETRO || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;
				
		END;
	
	END;
	
	
	PROCEDURE EXTRAIR_TODOS_PARAMETROS_JSON AS

		TESTE_JSON ITEM_TESTE;

	BEGIN

		TESTE_JSON.NOME := GET_EXTRAIR_PARAMETRO( 'NOME', '\{NOME:([^}]+)\}' );
		TESTE_JSON.INFO := GET_EXTRAIR_PARAMETRO( 'INFO', '\{INFO:([^}]+)\}' );
		TESTE_JSON.ALVO_OWNER := GET_EXTRAIR_PARAMETRO( 'ALVO_OWNER', '\{ALVO_OWNER:([^}]+)\}' );
		TESTE_JSON.ALVO_OBJECT := GET_EXTRAIR_PARAMETRO( 'ALVO_OBJECT', '\{ALVO_OBJECT:([^}]+)\}' );		
		TESTE_JSON.TESTE_AUXILIAR := GET_PARAMETRO_EXISTE( 'TESTE_AUXILIAR', '.*\{TESTE_AUXILIAR\}.*' );
		TESTE_JSON.TESTE_DESATIVADO := GET_PARAMETRO_EXISTE( 'TESTE_DESATIVADO', '.*\{TESTE_DESATIVADO\}.*' );
		TESTE_JSON.QUERY_ARGUMENTO := GET_EXTRAIR_PARAMETRO( 'QUERY_ARGUMENTO', '\{QUERY_ARGUMENTO:([^}]+)\}' );
		TESTE_JSON.HASH_ARGUMENTO := GERAR_HASH( TESTE_JSON.QUERY_ARGUMENTO );
		TESTE_JSON.ANTES := GET_EXTRAIR_PARAMETRO_LISTA( 'ANTES', '\{ANTES:([^}]+)\}' );
		TESTE_JSON.DEPOIS := GET_EXTRAIR_PARAMETRO_LISTA( 'DEPOIS', '\{DEPOIS:([^}]+)\}' );

		TESTE := TESTE_JSON;

	END;


	FUNCTION LER_METADADOS( p_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS
	BEGIN

		v_NOME_FUNCTION_TESTE := p_FUNCTION_TESTE;
		
		
		EXTRAI_CODIGO_FONTE_FUNCTION;
		
		
		IF NOT JSON_EXISTE THEN
		
			RETURN FALSE;
		
		END IF;
		
		
		EXTRAIR_TODOS_PARAMETROS_JSON;
			
		RETURN TRUE;
	
	END;
	
	
END EXTRAI_METADADOS_TESTE;
/
