--
-- Responsável por registrar novos TESTES criados ou atualizados
CREATE OR REPLACE PACKAGE MANUTENCAO_TESTE AS
--
-- Responsável por registrar novos TESTES criados ou atualizados
--
-- Autor: Wesley David Santos
-- Skype: wesleydavidsantos		
-- https://www.linkedin.com/in/wesleydavidsantos
--

	--
	-- Realiza o cadastro ou atualização de um teste
	FUNCTION SALVA_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN;


	--
	-- Realizar a ativação do TRACE
	FUNCTION ATIVAR_TRACE( p_TESTE_ID IN NUMBER ) RETURN VARCHAR2;


	--
	-- Realizar a desativação do TRACE
	FUNCTION DESATIVAR_TRACE( p_TESTE_ID IN NUMBER ) RETURN VARCHAR2;


	--
	-- Usado para atualizar a informação do último DDL realizado
	PROCEDURE ATUALIZAR_DATA_ALTERADO_DDL( p_TESTE_ID IN NUMBER, p_NOME_CAPSULA IN VARCHAR2 );
	
	
END MANUTENCAO_TESTE;
/





CREATE OR REPLACE PACKAGE BODY MANUTENCAO_TESTE AS
--
-- Autor: Wesley David Santos
-- Skype: wesleydavidsantos		
-- https://www.linkedin.com/in/wesleydavidsantos
--

	v_TESTE_ID NUMBER;

	TESTE EXTRAI_METADADOS_TESTE.ITEM_TESTE;

	RAISE_ERRO_ENCONTRADO EXCEPTION;
	

	FUNCTION RESULTADO RETURN VARCHAR2 AS
	BEGIN
		
		RETURN LOG_GERENCIADOR.GET_MSG;
	
	END;


	FUNCTION GET_TESTE_ID RETURN NUMBER IS
	BEGIN

		RETURN v_TESTE_ID;

	END;


	PROCEDURE ATIVAR_DESATIVAR_TRACE( p_TESTE_ID IN NUMBER, p_TIPO_ACAO IN VARCHAR2, p_RESULTADO OUT VARCHAR2 ) AS

		PRAGMA AUTONOMOUS_TRANSACTION;

		v_RESULTADO VARCHAR2(4000);

	BEGIN


		BEGIN


			UPDATE
				TDD_CAPSULA_PAI
			SET
				TRACE_ATIVADO = p_TIPO_ACAO
			WHERE
				FK_TESTE_ID = (
									SELECT
										T.ID
									FROM
										TESTE T
										INNER JOIN TDD_CAPSULA_PAI C ON C.FK_TESTE_ID = T.ID
									WHERE
										T.ID = p_TESTE_ID
							);


			IF SQL%ROWCOUNT > 0 THEN

				IF p_TIPO_ACAO = 'Y' THEN
					v_RESULTADO := 'Coleta de TRACE para o TESTE ID ' || p_TESTE_ID || ' foi ATIVADO com sucesso.';
				ELSE
					v_RESULTADO := 'Coleta de TRACE para o TESTE ID ' || p_TESTE_ID || ' foi DESATIVADO com sucesso.';
				END IF;
			
			ELSE

				IF p_TIPO_ACAO = 'Y' THEN
					v_RESULTADO := 'Falha ao ATIVAR a coleta de TRACE para o TESTE ID ' || p_TESTE_ID;
				ELSE
					v_RESULTADO := 'Falha ao DESATIVAR a coleta de TRACE para o TESTE ID ' || p_TESTE_ID;
				END IF;
			

			END IF;


			COMMIT;


			
		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao ATIVAR a coleta de TRACE. TESTE ID: ' || p_TESTE_ID || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				v_RESULTADO := ( 'Falha ao ATIVAR a coleta de TRACE. TESTE ID: ' || p_TESTE_ID || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );


		END;


		p_RESULTADO := v_RESULTADO;


	END;


	
	FUNCTION ATIVAR_TRACE( p_TESTE_ID IN NUMBER ) RETURN VARCHAR2 IS

		v_RESULTADO VARCHAR2(4000);

	BEGIN

		ATIVAR_DESATIVAR_TRACE( p_TESTE_ID, 'Y', v_RESULTADO );

		RETURN v_RESULTADO;

	END;



	FUNCTION DESATIVAR_TRACE( p_TESTE_ID IN NUMBER ) RETURN VARCHAR2 IS

		v_RESULTADO VARCHAR2(4000);

	BEGIN

		ATIVAR_DESATIVAR_TRACE( p_TESTE_ID, 'N', v_RESULTADO );

		RETURN v_RESULTADO;

	END;

	

	FUNCTION GET_OBJECT_ID_DDL_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN NUMBER IS

		v_OBJECT_ID NUMBER;

		p_OWNER VARCHAR2(50);

		p_OBJECT_NAME VARCHAR2(200);

	BEGIN

		BEGIN

			-- Procura o ID do Objeto que pertence a Function de Teste
			SELECT
				OBJECT_ID INTO v_OBJECT_ID
			FROM
				SYS.DBA_OBJECTS
			WHERE
				OWNER = CONSTANTES.OWNER_WDS_TDD_TESTE
				AND OBJECT_NAME = p_NOME_FUNCTION_TESTE;


			RETURN v_OBJECT_ID;

		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao identificar o TIMESTAMP do DDL da Function de teste criada. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;

		END;
	
	END;



	PROCEDURE ATUALIZAR_DATA_ALTERADO_DDL( p_TESTE_ID IN NUMBER, p_NOME_CAPSULA IN VARCHAR2 ) AS

		v_TESTE_ID NUMBER;

		v_NOME_CAPSULA VARCHAR2(200);

	BEGIN

		BEGIN
			
			v_TESTE_ID := p_TESTE_ID;

			v_NOME_CAPSULA := p_NOME_CAPSULA;

			UPDATE
				TESTE
			SET
				DATA_ALTERADO_DDL = ( SELECT TIMESTAMP FROM DBA_OBJECTS WHERE OBJECT_NAME = v_NOME_CAPSULA )
			WHERE
				ID = v_TESTE_ID;

			
			COMMIT;

		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha na ação de atualizar o campo DATA_ALTERADO_DDL da tabela TESTE. Teste ID: ' || v_TESTE_ID || ' - Capsula: ' || v_NOME_CAPSULA || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

		END;

	END;



	FUNCTION TESTE_FOI_ATUALIZADO( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS

		v_DDL_TESTE_ALTERADO VARCHAR2(20);

	BEGIN

		BEGIN

			SELECT

				CASE
					WHEN T.DATA_ALTERADO_DDL = OBJ.TIMESTAMP THEN
						'NAO_FOI_ATUALIZADO'
					ELSE
						'FOI_ATUALIZADO'
				END DDL_TESTE_ALTERADO INTO v_DDL_TESTE_ALTERADO

			FROM
				TESTE T
				INNER JOIN SYS.DBA_OBJECTS OBJ ON OBJ.OBJECT_NAME = T.ASSERCAO
			WHERE
				OWNER = CONSTANTES.OWNER_WDS_TDD_TESTE
				AND OBJECT_NAME = p_NOME_FUNCTION_TESTE;
				
			
			RETURN ( v_DDL_TESTE_ALTERADO = 'FOI_ATUALIZADO' );

		EXCEPTION

			WHEN NO_DATA_FOUND THEN
				-- Se não foi identificado o teste, então é o primeiro cadastro do teste

				RETURN TRUE;

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao verificar se teste foi atualizado. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

				RAISE RAISE_ERRO_ENCONTRADO;

		END;

	END;


	PROCEDURE ADD_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) AS

		v_ALVO_ID NUMBER;

		v_OBJECT_ID NUMBER;

		v_NOME VARCHAR2(4000);

		v_INFO VARCHAR2(4000);

		v_TESTE_ATIVADO CHAR(1);

		v_TESTE_AUXILIAR CHAR(1);

		v_QUERY_ARGUMENTO VARCHAR2(4000);

		v_HASH_ARGUMENTO VARCHAR2(4000);


	BEGIN

		BEGIN

			v_ALVO_ID := MANUTENCAO_ALVO.GET_ALVO_ID;

			v_NOME := TESTE.NOME;

			v_INFO := TESTE.INFO;

			v_QUERY_ARGUMENTO := TESTE.QUERY_ARGUMENTO;

			v_HASH_ARGUMENTO := TESTE.HASH_ARGUMENTO;

			v_OBJECT_ID := GET_OBJECT_ID_DDL_TESTE( p_NOME_FUNCTION_TESTE );



			-- Se o parâmetro foi declarado, então vai retornar TRUE o que informa que o TESTE deve ser considerado um auxiliar de outro Teste
			v_TESTE_AUXILIAR := 'N';
			
			IF TESTE.TESTE_AUXILIAR THEN
				 v_TESTE_AUXILIAR := 'Y';
			END IF;
			

			-- Se o parâmetro foi declarado, então vai retornar TRUE o que informa que o TESTE deve ser desativado
			v_TESTE_ATIVADO := 'Y';
			
			IF TESTE.TESTE_DESATIVADO THEN
				 v_TESTE_ATIVADO := 'N';
			END IF;


			
			INSERT INTO TESTE
				( FK_ALVO_ID, NOME, INFO, DATA_ALTERADO_DDL, ASSERCAO, QUERY_ARGUMENTO, HASH_ARGUMENTO, AUXILIAR, ATIVADO )
			VALUES
				(
					 v_ALVO_ID
					,v_NOME
					,v_INFO
					,( SELECT TIMESTAMP FROM SYS.DBA_OBJECTS WHERE OBJECT_ID = v_OBJECT_ID )
					,p_NOME_FUNCTION_TESTE
					,v_QUERY_ARGUMENTO
					,v_HASH_ARGUMENTO
					,v_TESTE_AUXILIAR
					,v_TESTE_ATIVADO
				)
			RETURNING ID INTO v_TESTE_ID;
			
			COMMIT;


		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao identificar o OBJECT_ID do DDL da Function de teste criada. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;

		END;

	END;


	PROCEDURE ATUALIZA_INFO_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) AS

		v_ALVO_ID NUMBER;

		v_OBJECT_ID NUMBER;

		v_NOME VARCHAR2(4000);

		v_INFO VARCHAR2(4000);

		v_TESTE_ATIVADO CHAR(1);

		v_TESTE_AUXILIAR CHAR(1);

		v_QUERY_ARGUMENTO VARCHAR2(4000);

		v_HASH_ARGUMENTO VARCHAR2(4000);

	BEGIN

		BEGIN

			v_ALVO_ID := MANUTENCAO_ALVO.GET_ALVO_ID;

			v_NOME := TESTE.NOME;

			v_INFO := TESTE.INFO;

			v_QUERY_ARGUMENTO := TESTE.QUERY_ARGUMENTO;

			v_HASH_ARGUMENTO := TESTE.HASH_ARGUMENTO;

			v_OBJECT_ID := GET_OBJECT_ID_DDL_TESTE( p_NOME_FUNCTION_TESTE );


			-- Se o parâmetro foi declarado, então vai retornar TRUE o que informa que o TESTE deve ser considerado um auxiliar de outro Teste
			v_TESTE_AUXILIAR := 'N';
			
			IF TESTE.TESTE_AUXILIAR THEN
				 v_TESTE_AUXILIAR := 'Y';
			END IF;


			-- Se o parâmetro foi declarado, então vai retornar TRUE o que informa que o TESTE deve ser desativado
			v_TESTE_ATIVADO := 'Y';

			IF TESTE.TESTE_DESATIVADO THEN
				 v_TESTE_ATIVADO := 'N';
			END IF;



			UPDATE
				TESTE
			SET
				 FK_ALVO_ID = v_ALVO_ID
				,NOME = v_NOME
				,INFO = v_INFO
				,DATA_ALTERADO_DDL = ( SELECT TIMESTAMP FROM SYS.DBA_OBJECTS WHERE OBJECT_ID = v_OBJECT_ID )
				,ASSERCAO = p_NOME_FUNCTION_TESTE
				,QUERY_ARGUMENTO = v_QUERY_ARGUMENTO
				,HASH_ARGUMENTO = v_HASH_ARGUMENTO
				,VERSAO_TESTE = ( VERSAO_TESTE + 1 )
				,AUXILIAR = v_TESTE_AUXILIAR
				,ATIVADO = v_TESTE_ATIVADO
			WHERE
				ID = v_TESTE_ID;

			
			COMMIT;



			-- Se o TESTE está sendo desativado, então é realizado o desencapsulamento da Capsula Filha
			IF v_TESTE_ATIVADO = 'N' THEN


				UPDATE
					TDD_CAPSULA_FILHA
				SET
					ENCAPSULADO = 'N'
				WHERE
					FK_TESTE_ID = v_TESTE_ID;

				
				COMMIT;

			
			END IF;

			
		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao atualizar as informações do teste. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
				RAISE RAISE_ERRO_ENCONTRADO;

		END;

	END;



	PROCEDURE DESATIVAR_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) AS

		v_ASSERCAO VARCHAR2(200);

	BEGIN


		BEGIN

			v_ASSERCAO := p_NOME_FUNCTION_TESTE;
			
			UPDATE
				TESTE
			SET
				ATIVADO = 'N'
			WHERE
				ASSERCAO = v_ASSERCAO;

			
			IF SQL%ROWCOUNT > 0 THEN

				LOG_GERENCIADOR.ADD_ALERTA( 'TESTE', 'O teste está sendo desativado. TESTE: ' || v_ASSERCAO );

			END IF;


			COMMIT;


			-- Desativa a Capsula Filha e consequentemente a Capsula Pai via chamada de trigger
			UPDATE
				TDD_CAPSULA_FILHA
			SET 
				ENCAPSULADO = 'N'
			WHERE
				FK_TESTE_ID = ( SELECT ID FROM TESTE WHERE ASSERCAO = v_ASSERCAO );


			COMMIT;


		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao desativar um determinado Teste. Assercao: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
				
		END;


	END;
	


	FUNCTION SALVA_TESTE_CONFIRMAR( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS
	BEGIN

		BEGIN

			BEGIN

				SELECT ID INTO v_TESTE_ID FROM TESTE WHERE ASSERCAO = p_NOME_FUNCTION_TESTE;

				ATUALIZA_INFO_TESTE( p_NOME_FUNCTION_TESTE );

			EXCEPTION

				WHEN NO_DATA_FOUND THEN

					ADD_TESTE( p_NOME_FUNCTION_TESTE );
					
			END;

			RETURN TRUE;

		EXCEPTION

			WHEN OTHERS THEN

				RAISE RAISE_ERRO_ENCONTRADO;

		END;

	END;


	FUNCTION INICIA_MANUTENCAO_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS

		v_ASSERCAO VARCHAR2(200);


		v_NOME_FUNCTION_TESTE VARCHAR2(200);

	BEGIN

		BEGIN

			 v_NOME_FUNCTION_TESTE := p_NOME_FUNCTION_TESTE;

			SELECT
				ASSERCAO INTO v_ASSERCAO
			FROM
				TESTE_EM_MANUTENCAO
			WHERE
				ASSERCAO = v_NOME_FUNCTION_TESTE;


			RETURN FALSE;


		EXCEPTION

			WHEN NO_DATA_FOUND THEN

				NULL;

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao identificar na tabela TESTE_EM_MANUTENCAO se existe uma manutenção em andamento. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

				RETURN FALSE;

		END;


		BEGIN


			INSERT INTO TESTE_EM_MANUTENCAO
				( ASSERCAO )
			VALUES
				( p_NOME_FUNCTION_TESTE );

			COMMIT;
			
			RETURN TRUE;

		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao iniciar a manutenção de um teste. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

				RETURN FALSE;

		END;

	END;


	PROCEDURE FINALIZA_MANUTENCAO_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) AS
	BEGIN


		BEGIN

			DELETE FROM 
				TESTE_EM_MANUTENCAO
			WHERE
				ASSERCAO = p_NOME_FUNCTION_TESTE;

			COMMIT;

		EXCEPTION

			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'SISTEMA', 'Falha ao finalizar a manutenção de um teste. TESTE: ' || p_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

		END;

	END;


	FUNCTION INICIA_ATUALIZACAO_DO_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS

		v_NOME_FUNCTION_TESTE VARCHAR2(200);

	BEGIN

		v_NOME_FUNCTION_TESTE := p_NOME_FUNCTION_TESTE;


		IF NOT INICIA_MANUTENCAO_TESTE( v_NOME_FUNCTION_TESTE ) THEN

			RETURN FALSE;

		END IF;


		IF NOT EXTRAI_METADADOS_TESTE.LER_METADADOS( v_NOME_FUNCTION_TESTE ) THEN

			LOG_GERENCIADOR.ADD_ERRO( 'TESTE', 'Não foi encontrado informações JSON no código do Teste. TESTE: ' || v_NOME_FUNCTION_TESTE );

			DESATIVAR_TESTE( v_NOME_FUNCTION_TESTE );
			
			RETURN FALSE;

		END IF;


		TESTE := EXTRAI_METADADOS_TESTE.GET_TESTE;


		IF NOT MANUTENCAO_ALVO.SALVA_ALVO( TESTE.ALVO_OWNER, TESTE.ALVO_OBJECT ) THEN

			RETURN FALSE;

		END IF;


		IF NOT VALIDA_OBJETO_TESTE( v_NOME_FUNCTION_TESTE ) THEN

			RETURN FALSE;

		END IF;


		IF NOT TESTE_FOI_ATUALIZADO( v_NOME_FUNCTION_TESTE ) THEN

			RETURN TRUE;

		END IF;


		IF NOT SALVA_TESTE_CONFIRMAR( v_NOME_FUNCTION_TESTE ) THEN

			RETURN FALSE;

		END IF;


		IF NOT CAPSULA_FILHA.ENCAPSULAR( v_NOME_FUNCTION_TESTE ) THEN

			LOG_GERENCIADOR.ADD_ALERTA( 'TESTE', 'Falha ao validar as ações ANTES_DEPOIS localizadas dentro do Teste. Desta forma o Teste não é ativado. TESTE: ' || v_NOME_FUNCTION_TESTE );

			RETURN FALSE;

		END IF;


		IF NOT MANUTENCAO_ANTES_DEPOIS.SALVA_TESTE( v_NOME_FUNCTION_TESTE, TESTE ) THEN
			--
			-- -- Esse processo funciona de Forma Recursiva em conjunto com a Package MANUTENCAO_ANTES_DEPOIS

			LOG_GERENCIADOR.ADD_ALERTA( 'TESTE', 'Falha ao validar as ações ANTES_DEPOIS localizadas dentro do Teste. Desta forma o Teste não é ativado. TESTE: ' || v_NOME_FUNCTION_TESTE );

			RETURN FALSE;

		END IF;


		LOG_GERENCIADOR.ADD_SUCESSO( 'TESTE', 'Teste adicionado/atualizado com sucesso. TESTE: ' || p_NOME_FUNCTION_TESTE );

		
		RETURN TRUE;

	END;


	FUNCTION SALVA_TESTE( p_NOME_FUNCTION_TESTE IN VARCHAR2 ) RETURN BOOLEAN IS

		v_FLAG_SALVA_TESTE BOOLEAN;

		v_NOME_FUNCTION_TESTE VARCHAR2(200);


	BEGIN

		BEGIN

			v_NOME_FUNCTION_TESTE := p_NOME_FUNCTION_TESTE;


			v_FLAG_SALVA_TESTE := INICIA_ATUALIZACAO_DO_TESTE( v_NOME_FUNCTION_TESTE );


			IF NOT v_FLAG_SALVA_TESTE THEN

				ROLLBACK;

			END IF;


			FINALIZA_MANUTENCAO_TESTE( v_NOME_FUNCTION_TESTE );


			RETURN v_FLAG_SALVA_TESTE;
			
			
		EXCEPTION
			
			WHEN OTHERS THEN

				LOG_GERENCIADOR.ADD_ERRO( 'TESTE', 'Falha no processo de Salvar Teste. TESTE: ' || v_NOME_FUNCTION_TESTE || ' - Erro: ' || SQLERRM || ' - ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );

				FINALIZA_MANUTENCAO_TESTE( v_NOME_FUNCTION_TESTE );
			
				RETURN FALSE;
		
		END;		

	END;

END MANUTENCAO_TESTE;
/
