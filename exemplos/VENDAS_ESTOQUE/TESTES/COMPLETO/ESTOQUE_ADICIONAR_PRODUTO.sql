


DROP TABLE WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE;


CREATE TABLE WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE (
	NOME VARCHAR2(100) NOT NULL,
	QUANTIDADE NUMBER NOT NULL,
    PRECO BINARY_FLOAT NOT NULL
);







--
-- Função de teste
CREATE OR REPLACE FUNCTION REMOVER_PRODUTOS_PARA_ESTOQUE RETURN BOOLEAN IS
/*
{NOME:Remove os valores antigos para teste de Estoque}
{INFO:Remove os produtos da tabela de teste de Estoque}
{ALVO_OWNER:VENDAS_ESTOQUE}
{ALVO_OBJECT:SEM_OBJETO}
{TESTE_AUXILIAR}
*/
BEGIN


    DELETE FROM WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE;

	
	COMMIT;
    
	
	RETURN TRUE;

END;
/




--
-- Função de teste
CREATE OR REPLACE FUNCTION CRIAR_PRODUTOS_PARA_ESTOQUE RETURN BOOLEAN IS
/*
{NOME:Gera valores para teste de cadastro de Estoque}
{INFO:Cria os produtos de forma aleatória que serão cadastrados nos Estoque }
{ALVO_OWNER:VENDAS_ESTOQUE}
{ALVO_OBJECT:SEM_OBJETO}
{TESTE_AUXILIAR}
{ANTES:REMOVER_PRODUTOS_PARA_ESTOQUE}
*/

	v_FLAG_REGISTRADO NUMBER;

    v_NOME_PRODUTO VARCHAR2(100);

    v_QUANTIDADE_PRODUTOS NUMBER;

    v_PRECO_PRODUTO BINARY_FLOAT;

    v_RESULTADO NUMBER;

BEGIN


    FOR I IN 1..10 LOOP


        -- Gera um nome aleatório
        v_NOME_PRODUTO := 'Pneu Top dos Top - X_' || TRUNC( DBMS_RANDOM.VALUE(0, 1000000000001) );


        v_PRECO_PRODUTO :=  ROUND( DBMS_RANDOM.VALUE(0, 10) * 99 + 1, 2);


        v_QUANTIDADE_PRODUTOS := TRUNC( DBMS_RANDOM.VALUE(0, 500) );


        INSERT INTO WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE
            ( NOME, QUANTIDADE, PRECO )
        VALUES
            ( v_NOME_PRODUTO, v_QUANTIDADE_PRODUTOS, v_PRECO_PRODUTO );


    END LOOP;


    v_RESULTADO := SQL%ROWCOUNT;
	
	COMMIT;
	
	RETURN ( v_RESULTADO > 0 );

END;
/












--
-- Função de teste
CREATE OR REPLACE FUNCTION ROLLBACK_ESTOQUE_ADICIONAR_PRODUTO( p_NOME_PRODUTO IN VARCHAR2, p_PRECO BINARY_FLOAT ) RETURN BOOLEAN IS
/*
{NOME:Realiza Rollback dos produtos adicionados no formato de TESTE}
{INFO:Realiza o rollback de todos os produtos adicionados para teste}
{ALVO_OWNER:VENDAS_ESTOQUE}
{ALVO_OBJECT:ADICIONAR_PRODUTO}
{QUERY_ARGUMENTO:SELECT NOME, PRECO FROM WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE}
{ANTES:ROLLBACK_REMOVER_VENDA_REALIZADA}
{TESTE_AUXILIAR}
*/

BEGIN

    -- Verifica se o produto foi inserido com sucesso
    DELETE FROM
        VENDAS_ESTOQUE.ESTOQUE
    WHERE 
        NOME = p_NOME_PRODUTO
        AND PRECO = p_PRECO;


    COMMIT;


    RETURN TRUE;
	
END;
/







--
-- Função de teste
CREATE OR REPLACE FUNCTION ESTOQUE_ADICIONAR_PRODUTO( p_NOME_PRODUTO IN VARCHAR2, p_QUANTIDADE NUMBER, p_PRECO BINARY_FLOAT ) RETURN BOOLEAN IS
/*
{NOME:Adiciona novo produto no Estoque}
{INFO:Realiza o cadastro de um novo produto ao estoque }
{ALVO_OWNER:VENDAS_ESTOQUE}
{ALVO_OBJECT:ADICIONAR_PRODUTO}
{QUERY_ARGUMENTO:SELECT NOME, QUANTIDADE, PRECO FROM WDS_PLSQL_TDD_TESTE.PRODUTOS_PARA_ESTOQUE}
{ANTES:ROLLBACK_ESTOQUE_ADICIONAR_PRODUTO, CRIAR_PRODUTOS_PARA_ESTOQUE}
*/

    v_FLAG_REGISTRADO NUMBER;

BEGIN


	VENDAS_ESTOQUE.ADICIONAR_PRODUTO( p_NOME_PRODUTO, p_QUANTIDADE, p_PRECO );


    -- Verifica se o produto foi inserido com sucesso
    SELECT
        COUNT(1)
    INTO
        v_FLAG_REGISTRADO
    FROM
        VENDAS_ESTOQUE.ESTOQUE
    WHERE 
        NOME = p_NOME_PRODUTO
        AND QUANTIDADE = p_QUANTIDADE
        AND PRECO = p_PRECO;
    

    RETURN v_FLAG_REGISTRADO > 0;

		
END;
/


